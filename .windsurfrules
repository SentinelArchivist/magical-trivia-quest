# Coding & Structure Rules

- Impact Analysis: Before any code changes, always analyze all relevant parts of the codebase and dependencies, documenting all potential system-wide impacts of the changes.
- Simplicity First: Always implement the simplest solution that meets all requirements, avoiding over-engineering and unrequested features.
- No Duplication: Always avoid duplication of code.
- No Scripts in Files: Always avoid writing scripts in files, if possible, especially if the script is likely to be run only once.
- Tech Stack Adherence: Strictly use only the project's existing technology stack; new tech requires explicit, prior approval by the user. Exception: if no stack yet exists (e.g., new project), then default to html/js or python for the front end. Default to python for the backend.
- Short, Focused Files: Always keep files short and focused, typically containing one class or a cohesive group of related functions/data structures that serve a single purpose.
- SRP: Functions and methods should be as concise as possible and should always adhere strictly to the Single Responsibility Principle.
- File Size: Always keep files as small as possible, while adhering to the standards described above (200-300 lines MAX, per file, is a good guideline in most cases).
- Directory Structure: Maintain a clear, logical directory structure organized by feature or module.
- Function/Method Design: Ensure all functions and methods are short, highly cohesive, and perform only a single, well-defined task.
- Edit Existing Code First: Always look at existing code and determine whether an  edit or change would be sufficient for the task before writing new code or new files.
- Prefer Existing Patterns: never drastically change existing patterns unless you’re highly confident the task at hand can’t be accomplished by iterating on existing patterns.
- Naming Conventions: Employ meaningful, descriptive, and consistent naming for all identifiers.
- Comments: Add concise comments ONLY for non-obvious logic, critical assumptions, or complex algorithms that cannot be clarified by code structure or naming alone; prioritize self-documenting code.
- Error Handling: Always implement comprehensive error handling, rigorous input validation (types, ranges, formats), and thorough boundary condition checks.
- Security: Always adhere to project-specific or language-standard secure coding practices to prevent vulnerabilities.
- Mocking data is only needed for tests. Never use mock data outside of testing, and never in a way that would affect development or production environments.
- Never overwrite my .env file without asking and getting my permission first.
- Ambiguity & Conflicts: If task requirements are ambiguous or directly conflict with these rules, STOP and seek explicit clarification from the user before proceeding.
- Server Restart with Changes: After making changes, always make sure to start up a new server and a new browser preview (if relevant) so I can test it.
- Write Thorough Tests for All Major Functionality.
- Rate limit all api endpoints.
- Always use row level security (RLS).
- Captcha on all auth routes/signup pages
- If using hosting solution like vercel, enable attack challenge on their WAF.
- Rule Authority: These rules are mandatory and non-negotiable unless a specific deviation is explicitly authorized by the user.